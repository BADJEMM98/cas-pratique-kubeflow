name: Train xgboost
inputs:
- {name: train, type: CSV}
- {name: n_estimators, type: Integer}
- {name: learning_rate, type: Float}
- {name: max_depth, type: Integer}
- {name: booster, type: String}
- {name: bucket, type: String}
- {name: access_key_id, type: String}
- {name: acces_key_secret, type: String}
outputs:
- {name: train_accuracy, type: Float}
- {name: train_roc_auc_score, type: Float}
- {name: modelname, type: String}
implementation:
  container:
    image: python:3.8
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'boto3' 'pandas' 'scikit-learn' 'xgboost' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'boto3' 'pandas' 'scikit-learn'
      'xgboost' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def train_xgboost(\n    train_path,\n    n_estimators,\n    learning_rate,\n\
      \    max_depth,\n    booster,\n    bucket,\n    access_key_id,\n    acces_key_secret,\n\
      ):\n\n    from datetime import datetime\n    import pandas as pd\n    import\
      \ boto3\n    import joblib\n    from xgboost import XGBClassifier\n    from\
      \ collections import namedtuple\n    from sklearn.metrics import accuracy_score,\
      \ roc_auc_score\n\n    model_name = \"xgboost\"\n\n    time = str(datetime.now()).replace(\"\
      \ \", \"_\")\n    model_path = f\"{model_name}_{time}.sbt\"\n\n    modelname\
      \ = f\"models/{model_path}\"\n\n    train_data = pd.read_csv(train_path)\n\n\
      \    X_train = train_data.drop([\"salary\"], axis=1)\n    y_train = train_data[\"\
      salary\"]\n\n    xgb_model = XGBClassifier(\n        random_state=42, \n   \
      \     n_estimators = n_estimators, \n        max_depth = max_depth, \n     \
      \   booster = booster,\n        learning_rate = learning_rate\n    )\n    xgb_model.fit(X_train,\
      \ y_train)\n\n    y_pred = xgb_model.predict(X_train)\n    roc_auc = roc_auc_score(y_train,y_pred)\n\
      \    accuracy = accuracy_score(y_train,y_pred)\n\n    joblib.dump(xgb_model,\
      \ model_path)\n    s3_client = boto3.client('s3',aws_access_key_id=access_key_id,aws_secret_access_key=acces_key_secret)\n\
      \    response= s3_client.upload_file(model_path, bucket, modelname)\n\n    #\
      \ print(response.get('ResponseMetadata', {}).get('HTTPStatusCode'))\n\n    output\
      \ = namedtuple(\"TrainOutputs\",[\"train_accuracy\",\"train_roc_auc_score\"\
      ,\"modelname\"])\n\n    return output(accuracy, roc_auc,modelname)\n\ndef _serialize_float(float_value:\
      \ float) -> str:\n    if isinstance(float_value, str):\n        return float_value\n\
      \    if not isinstance(float_value, (float, int)):\n        raise TypeError('Value\
      \ \"{}\" has type \"{}\" instead of float.'.format(\n            str(float_value),\
      \ str(type(float_value))))\n    return str(float_value)\n\ndef _serialize_str(str_value:\
      \ str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value\
      \ \"{}\" has type \"{}\" instead of str.'.format(\n            str(str_value),\
      \ str(type(str_value))))\n    return str_value\n\nimport argparse\n_parser =\
      \ argparse.ArgumentParser(prog='Train xgboost', description='')\n_parser.add_argument(\"\
      --train\", dest=\"train_path\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--n-estimators\", dest=\"n_estimators\", type=int, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--learning-rate\", dest=\"\
      learning_rate\", type=float, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --max-depth\", dest=\"max_depth\", type=int, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--booster\", dest=\"booster\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--bucket\", dest=\"bucket\"\
      , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --access-key-id\", dest=\"access_key_id\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--acces-key-secret\", dest=\"acces_key_secret\", type=str,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"----output-paths\"\
      , dest=\"_output_paths\", type=str, nargs=3)\n_parsed_args = vars(_parser.parse_args())\n\
      _output_files = _parsed_args.pop(\"_output_paths\", [])\n\n_outputs = train_xgboost(**_parsed_args)\n\
      \n_output_serializers = [\n    _serialize_float,\n    _serialize_float,\n  \
      \  _serialize_str,\n\n]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n\
      \    try:\n        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n\
      \        pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --train
    - {inputPath: train}
    - --n-estimators
    - {inputValue: n_estimators}
    - --learning-rate
    - {inputValue: learning_rate}
    - --max-depth
    - {inputValue: max_depth}
    - --booster
    - {inputValue: booster}
    - --bucket
    - {inputValue: bucket}
    - --access-key-id
    - {inputValue: access_key_id}
    - --acces-key-secret
    - {inputValue: acces_key_secret}
    - '----output-paths'
    - {outputPath: train_accuracy}
    - {outputPath: train_roc_auc_score}
    - {outputPath: modelname}
